name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  TERRAFORM_VERSION: '1.10.5'
  TFLINT_VERSION: 'v0.50.0'
  TFSEC_VERSION: 'v1.28.0'
  TERRAFORM_DOCS_VERSION: 'v0.17.0'

jobs:
  # Job 1: Detect Changed Modules
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-matrix.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed modules
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            */*/main.tf
            */*/variables.tf
            */*/outputs.tf

      - name: Set matrix for changed modules
        id: set-matrix
        run: |
          MODULES=$(find . -type f -name "main.tf" -not -path "*/examples/*" -not -path "*/.terraform/*" | sed 's|/main.tf||' | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "Found modules: $MODULES"

  # Job 2: Terraform Format Check
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != '[]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive
          if [ $? -ne 0 ]; then
            echo "❌ Terraform files are not formatted correctly"
            echo "Run: terraform fmt -recursive"
            exit 1
          fi
          echo "✅ All Terraform files are properly formatted"

  # Job 3: Terraform Validate
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-fmt]
    if: needs.detect-changes.outputs.modules != '[]'
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: |
          cd ${{ matrix.module }}
          terraform init -backend=false
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ matrix.module }}
          terraform validate -no-color
        continue-on-error: true

      - name: Post validation results
        if: always()
        run: |
          if [ "${{ steps.init.outcome }}" == "failure" ] || [ "${{ steps.validate.outcome }}" == "failure" ]; then
            echo "❌ Validation failed for ${{ matrix.module }}"
            exit 1
          else
            echo "✅ Validation passed for ${{ matrix.module }}"
          fi

  # Job 4: TFLint
  tflint:
    name: TFLint Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-fmt]
    if: needs.detect-changes.outputs.modules != '[]'
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache TFLint plugins
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: |
          cd ${{ matrix.module }}
          tflint --format compact --color
        continue-on-error: true

      - name: Post TFLint results
        if: always()
        run: |
          if [ "${{ steps.tflint.outcome }}" == "failure" ]; then
            echo "⚠️ TFLint found issues in ${{ matrix.module }}"
          else
            echo "✅ TFLint passed for ${{ matrix.module }}"
          fi

  # Job 5: tfsec Security Scan
  tfsec:
    name: tfsec Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-fmt]
    if: needs.detect-changes.outputs.modules != '[]'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ matrix.module }}
          soft_fail: true
          format: sarif
          additional_args: --minimum-severity MEDIUM
        continue-on-error: true

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: results.sarif
          category: tfsec-${{ matrix.module }}

  # Job 6: Terraform Docs
  terraform-docs:
    name: Generate Terraform Docs
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Terraform docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: ${{ matrix.module }}
          output-file: README.md
          output-method: inject
          git-push: true
          config-file: .terraform-docs.yml

  # Job 7: Cost Estimation (Infracost)
  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate cost estimate
        run: |
          infracost breakdown --path . --format json --out-file /tmp/infracost.json || true

      - name: Post cost comment
        uses: infracost/actions/comment@v1
        if: always()
        with:
          path: /tmp/infracost.json
          behavior: update

  # Job 8: Summary Report
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, tflint, tfsec]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# 🚀 Terraform CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Format Check: ${{ needs.terraform-fmt.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validation: ${{ needs.terraform-validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TFLint: ${{ needs.tflint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ tfsec: ${{ needs.tfsec.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Check cost estimates in PR comments" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all modules pass validation" >> $GITHUB_STEP_SUMMARY

