name: Terraform Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate Terraform Modules
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        module:
          - networking/vpc-networking
          - networking/alb-loadbalancer
          - networking/internet-gateway-nat
          - compute/ecs-fargate-service
          - compute/lambda-api-gateway
          # Add more modules as they're created
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive ${{ matrix.module }}
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: |
          cd ${{ matrix.module }}
          terraform init -backend=false
      
      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ matrix.module }}
          terraform validate
      
      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request' && (steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            *Module: ${{ matrix.module }}*
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

